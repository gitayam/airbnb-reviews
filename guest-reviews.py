from openai import OpenAI
import pyperclip
import os
from dotenv import load_dotenv
import argparse
from colorama import init
from flask import Flask, request, jsonify

app = Flask(__name__)

# Initialize colorama
init()

# Define formatting
HEADER = '\033[95m'
BLUE = '\033[94m'
CYAN = '\033[96m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
ITALIC = '\033[3m'

# Load environment variables from .env file
load_dotenv()

# Initialize the OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
host_name = os.getenv("HOST_NAME")
home_details = os.getenv("HOME_DETAILS")
model = os.getenv("MODEL")
port = int(os.getenv("PORT_NUMBER", 5000))  # Default to 5000 if not set

def get_user_rating(prompt):
    while True:
        try:
            rating = input(prompt)
            if rating == '':
                return '2'
            if rating not in ['1', '2', '3']:
                raise ValueError('Rating must be 1, 2, or 3.')
            return rating
        except ValueError as e:
            print(e)

def get_user_comment(prompt):
    comments = input(prompt)
    return comments

def convert_rating_to_description(rating):
    # Convert the rating to a description, change the descriptions as needed
    return {
        '1': 'Terrible',
        '2': 'Good',
        '3': 'Great'
    }.get(rating, 'unknown')

def generate_review(name, rating, communication, cleanliness, house_rules, comments):
    # Convert the ratings to descriptions
    rating_description = convert_rating_to_description(rating)
    communication_description = convert_rating_to_description(communication)
    cleanliness_description = convert_rating_to_description(cleanliness)
    house_rules_description = convert_rating_to_description(house_rules)
    # Generate the prompt for the model to then use
    prompt = (
        f"Generate a brief, kind, polite, and professional guest review for Airbnb which I host based on the following details:\n"
        f"Name: {name}\n"
        f"Rating: {rating_description}\n"
        f"Communication: {communication_description}\n"
        f"Cleanliness: {cleanliness_description}\n"
        f"House Rules: {house_rules_description}\n"
        f"Comments: {comments}\n"
        "The review should be less than 4 sentences long. One emoji can be used."
    )
    # Call the model to generate the review
    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content.strip()

def generate_private_note_to_guest(name, rating, communication, cleanliness, house_rules, private_note):
    # Convert the ratings to descriptions
    rating_description = convert_rating_to_description(rating)
    communication_description = convert_rating_to_description(communication)
    cleanliness_description = convert_rating_to_description(cleanliness)
    house_rules_description = convert_rating_to_description(house_rules)
    # Generate the prompt for the model to then use
    prompt = (
        f"Generate a private note to the guest for Airbnb which I host based on the following details:\n"
        f"Guest Name: {name}\n"
        f"Guest Overall Rating: {rating_description}\n"
        f"Communication: {communication_description}\n"
        f"Cleanliness: {cleanliness_description}\n"
        f"House Rules: {house_rules_description}\n"
        f"Private Note: {private_note}\n"
        f"Home Details: {home_details}\n"
        f"My name is {host_name} and I am the host of this Airbnb listing.\n"
        "The note should be less than 4 sentences long, friendly, and should welcome the guest back anytime. One emoji can be used. The goal of the note should be influencing the guest to save our Airbnb listing for next time."
    )
    # Call the model to generate the private note
    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}]
    )
    # Return the private note generated by the model
    return response.choices[0].message.content.strip()

@app.route('/generate_review', methods=['POST'])
def generate_review_route():
    data = request.json
    name = data.get('name')
    rating = data.get('rating')
    communication = data.get('communication')
    cleanliness = data.get('cleanliness')
    house_rules = data.get('house_rules')
    comments = data.get('comments', '')
    review = generate_review(name, rating, communication, cleanliness, house_rules, comments)
    return jsonify({"review": review})

@app.route('/generate_private_note', methods=['POST'])
def generate_private_note_route():
    data = request.json
    name = data.get('name')
    rating = data.get('rating')
    communication = data.get('communication')
    cleanliness = data.get('cleanliness')
    house_rules = data.get('house_rules')
    private_note = data.get('private_note', '')
    note = generate_private_note_to_guest(name, rating, communication, cleanliness, house_rules, private_note)
    return jsonify({"private_note": note})

if __name__ == '__main__':
    # Run the Flask app on the specified port
    app.run(host='0.0.0.0', port=port)